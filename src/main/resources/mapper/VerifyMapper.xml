<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.demo.mapper.VerifyMapper">

	<insert id="insertVerification"
		parameterType="com.example.demo.model.AccountVerification">
		INSERT INTO ACCOUNT_VERIFICATION (
			-- NUM 필드는 MySQL에서는 AUTO_INCREMENT를 사용하는 것이 일반적
			ID,
			CODE,
			TYPE,
			EXPIRES_AT,
			VERIFIED,
			CREATED_AT
		) VALUES (
			#{id},
			#{code},
			#{type},
			#{expiresAt},
			'N',
			NOW()
		)
	</insert>

	<select id="findByCode" parameterType="map"
		resultType="com.example.demo.model.AccountVerification">
		SELECT *
		FROM ACCOUNT_VERIFICATION
		WHERE CODE = #{code}
		AND TYPE = #{type}
	</select>

	<update id="updateEmailVerified">
		UPDATE MEMBER
		SET EMAIL_VERIFIED = 'Y'
		WHERE ID = (
			SELECT ID
			FROM ACCOUNT_VERIFICATION
			WHERE CODE = #{code}
			AND TYPE = 'MEMBER_JOIN'
		)
	</update>

	<update id="updateMemberTable" parameterType="String">
		UPDATE MEMBER
		SET EMAIL_VERIFIED = 'Y'
		WHERE id = #{id}
	</update>

	<update id="updateVerificationTable" parameterType="map">
		UPDATE ACCOUNT_VERIFICATION
		SET VERIFIED = 'Y', USED_AT = NOW()
		WHERE CODE = #{code}
		AND TYPE = #{type}
	</update>

	<insert id="insertTestMember"
		parameterType="com.example.demo.model.Member">
		INSERT INTO MEMBER (
			id,
			name,
			nickname,
			pw,
			birth_date,
			email_id,
			email_domain,
			phone,
			gender,
			join_date,
			state,
			email_ad,
			email_verified
		) VALUES (
			#{id},
			#{name},
			#{nickname},
			#{pw},
			#{birthDate},
			#{emailId},
			#{emailDomain},
			#{phone},
			#{gender},
			#{joinDate},
			#{state},
			#{emailAd},
			#{emailVerified}
		)
	</insert>

	<select id="findIdMember" parameterType="String"
		resultType="com.example.demo.model.Member">
		SELECT *
		FROM MEMBER
		WHERE CONCAT(email_id, '@', email_domain) = #{email}
	</select>

	<select id="isEmailExist" resultType="int">
		SELECT CASE
			WHEN COUNT(*) > 0 THEN 1
			ELSE 0
		END
		FROM MEMBER
		WHERE CONCAT(email_id, '@', email_domain) = #{email}
	</select>

	<select id="findByEmailAndType"
		resultType="com.example.demo.model.AccountVerification">
		SELECT *
		FROM (
			SELECT av.*
			FROM ACCOUNT_VERIFICATION av
			JOIN MEMBER m ON av.id = m.id
			WHERE CONCAT(m.email_id, '@', m.email_domain) = #{email}
			AND av.type = #{type}
			ORDER BY av.created_at DESC
			LIMIT 1
		) AS sub
	</select>

</mapper>
