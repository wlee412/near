<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.demo.mapper.ClientMapper">


	<!-- 회원가입. -->
	<insert id="insert"
		parameterType="com.example.demo.model.Client">
		INSERT INTO client (
		client_id,
		password,
		name,
		phone,
		email_id,
		email_domain,
		zipcode,
		addr_base,
		addr_detail,
		birth,
		gender,
		alarm,
		personal_info,
		social_platform,
		social_id,
		interest,
		verified,
		state,
		reg_date
		)
		VALUES (
		#{clientId},
		#{password},
		#{name},
		#{phone},
		#{emailId},
		#{emailDomain},
		#{zipcode},
		#{addrBase},
		#{addrDetail},
		#{birth},
		#{gender},
		#{alarm},
		#{personalInfo},
		#{socialPlatform},
		#{socialId},
		#{interest},
		#{verified},
		#{state},
		NOW()
		)
	</insert>

	<!-- ID 중복 확인 -->
	<select id="countById" parameterType="String" resultType="int">
		SELECT
		COUNT(*) FROM client
		WHERE client_id = #{clientId} AND state = 0
	</select>


	<select id="findByEmail"
		resultType="com.example.demo.model.Client">
		SELECT * FROM client
		WHERE CONCAT(email_id, '@',
		email_domain) =
		#{email} AND state = 0
	</select>

	<!-- 이메일 중복 확인 -->
	<select id="selectByEmailForRegister" parameterType="string"
		resultType="com.example.demo.model.Client">
		SELECT * FROM client
		WHERE CONCAT(email_id, '@', email_domain) =
		#{email}
		AND state = 0  <!-- 추가: 탈퇴 제외 -->
	</select>


	<!-- 로그인 : 영교님꺼 추가 -->
	<select id="login" parameterType="String"
		resultType="com.example.demo.model.Client">
		SELECT *
		FROM client
		WHERE client_id = #{clientId}
		AND state =
		0
	</select>
	<!-- AND state IN (0, 2) 상태값 0,2 회원만 로그인 가능 -->

	<select id="findBySocialIdAndPlatform"
		resultType="com.example.demo.model.Client">
		SELECT * FROM
		client WHERE SOCIAL_ID = #{socialId} AND
		SOCIAL_PLATFORM =
		#{platform}
		AND state = 0
	</select>

	<insert id="socialInsert"
		parameterType="com.example.demo.model.Client">
		INSERT INTO client (
		client_id,
		password,
		name,
		phone,
		email_id,
		email_domain,
		zipcode,
		addr_base,
		addr_detail,
		birth,
		gender,
		alarm,
		personal_info,
		social_platform,
		social_id,
		interest,
		verified,
		state,
		reg_date
		)
		VALUES (
		#{clientId},
		#{password},
		#{name},
		#{phone},
		#{emailId},
		#{emailDomain},
		#{zipcode},
		#{addrBase},
		#{addrDetail},
		#{birth},
		#{gender},
		#{alarm},
		#{personalInfo},
		#{socialPlatform},
		#{socialId},
		#{interest},
		#{verified},
		#{state},
		NOW()
		)
	</insert>





	<!-- 회원정보 수정 -->
	<update id="updateClient"
		parameterType="com.example.demo.model.Client">
		UPDATE client
		SET
		name = #{name},
		phone = #{phone},
		email_id = #{emailId},
		email_domain =
		#{emailDomain},
		gender = #{gender},
		interest =
		#{interest},
		zipcode =
		#{zipcode},
		addr_base = #{addrBase},
		addr_detail =
		#{addrDetail}
		<if test="birth != null">
			, birth = #{birth}
		</if>
		WHERE client_id = #{clientId}
	</update>

	<!-- 회원정보 수정 후 최신 정보 조회 -->
	<select id="getClientById" parameterType="String"
		resultType="com.example.demo.model.Client">
		SELECT * FROM client WHERE client_id = #{clientId}
	</select>

	<!-- 아이디/비밀번호 찾기용 이메일 -->
	<select id="selectByEmailForFind" parameterType="string"
		resultType="com.example.demo.model.Client">
		SELECT
		client_id AS clientId,
		email_id AS emailId,
		email_domain AS emailDomain
		FROM client
		WHERE CONCAT(email_id, '@',
		email_domain) = #{email}
	</select>


	<select id="selectByIdAndEmail"
		resultType="com.example.demo.model.Client">
		SELECT * FROM client
		WHERE client_id = #{clientId}
		AND
		email_id || '@' ||
		email_domain = #{email}
	</select>

	<!-- 아이디/비번찾기 -->
	<select id="findById" resultType="com.example.demo.model.Client"
		parameterType="String">
		SELECT * FROM client WHERE client_id = #{clientId}
	</select>

	<!-- 비밀번호 변경 -->
	<update id="updatePassword"
		parameterType="com.example.demo.model.Client">
		UPDATE client
		SET password = #{password}
		WHERE client_id =
		#{clientId}
	</update>

	<!-- 비번찾기에서 비번번경 -->
	<update id="updatePasswordForFind" parameterType="map">
		UPDATE client
		SET password = #{newPw}
		WHERE client_id = #{clientId}
	</update>


	<!-- 회원 탈퇴 : 실제 DB삭제 안하고 상태값만 바꿈 -->
	<update id="deleteClient" parameterType="String">
		UPDATE client
		SET state =
		1
		WHERE client_id = #{clientId}
		AND state = 0
	</update>

	<select id="findByPhone"
		resultType="com.example.demo.model.Client">
		SELECT * FROM client
		WHERE PHONE = #{phone}
	</select>




</mapper>